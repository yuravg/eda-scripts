#!/usr/bin/env bash

#
# Build Quartus project
#
# This script launches verification with Intel Quartus II Programmer via ASP to program 'pof'
# file. The 'pof' file is searched for in the current directory or given as an argument.
#
# For more then one program cable:
#     set environment variable 'QP_CABLE_NAME':
#     # export QP_CABLE_NAME=USB-Blaster[USB-0]
#


#
# Run Altera Quartus build project from current directory
#  input parameter(s):
#    1 - quartus project revision number (you can see if using script without parameters)
# Usage: qp_build
# or     qp_build <revision_number>
#

# enable or disable sound in script
# SOUND_EN=1

# disable tcl/tk message "end of compilation"
# QP_END_CMSG_OFF=1

echo "+------------------------------------------------------------------------+"
echo "|  Build quartus project                                                 |"
echo "+------------------------------------------------------------------------+"

case "$1" in
    "-h"  )
        echo ""
        echo " Help:"
        echo ""
        echo "   Available variables:"
        echo " SOUND_EN        - enable or disable sound in script"
        echo " QP_END_CMSG_OFF - disable tcl/tk message \"end of compilation\""
        echo ""
        echo "Example usage:"
        echo "export QP_END_CMSG_OFF=1"
        echo "unset QP_END_CMSG_OFF"
        echo ""
        echo "Done (end of help)"
        exit
        ;;
esac

cnt=1
for p in `ls *.qpf 2>/dev/null`; do
    prj[$cnt]=$p
    cnt=`expr $cnt + 1`
done
if [ ${#prj[@]} -ne 1 ]; then
    echo "ERROR! There must be only one *.qpf file in dir: `pwd`"
    exit 2
else
    project=${prj[1]}
    echo " project : '$project'"
fi

cnt=1
for p in `ls *.qsf 2>/dev/null`; do
    rev[$cnt]=$p
    cnt=`expr $cnt + 1`
done

revision="$1"

if [ ${#rev[@]} -gt 0 ]; then
    case "$revision" in
        1|2|3|4|5|6|7|8|9)
            echo "Start compilation revision '${rev[$revision]}'"
            num_revision=$revision
            ;;
        0)
            echo "Start compilation ALL revisions"
            num_revision=$revision
            ;;
        *)
            if [ ${#rev[@]} -eq 1 ]; then
                num_revision=1
            else
                echo " revisions:"
                for (( i=1; i<${#rev[@]}+1; i++ )); do
                    echo "$i : ${rev[${i}]}"
                done
                echo "Select revision for build (0 - for all revision):"
                read num_revision
            fi
            ;;
    esac
elif [ ${#rev[@]} -eq 0 ]; then
    echo "ERROR! There must be at least one *.qsf file in dir: `pwd`"
    exit 3
fi
case "$num_revision" in
    [1-9])
        revision=${rev[$num_revision]}
        ;;
    *)
        echo "WARNING: will be build default revision"
        revision=${rev[1]}
        ;;
esac

check_quartus_exit ()
{
    if [ "$?" -ne 0 ]; then
        echo "Error during compilation!"
        if [ -z "$QP_END_CMSG_OFF" ]; then
           wish_msg "ERROR!" "red" "`pwd`/$project" &
        fi
        exit 4
    fi
}
case "$num_revision" in
    "")
        echo "WARNING: Exit without compilation!"
        exit 0
        ;;
    0)
        echo "Run compilation ..."
        for (( i=1; i<${#rev[@]}+1; i++ )); do
            echo "---------------------------------------------------"
            echo "$i : ${rev[${i}]}"
            quartus_sh --flow compile $project -c ${rev[${i}]}
            check_quartus_exit
        done
        ;;
    *)
        echo " revision : '$revision'"
        quartus_sh --flow compile $project -c $revision
        check_quartus_exit
        ;;
esac

if [ -z "$QP_END_CMSG_OFF" ]; then
    if [ -z "$SOUND_EN" ]; then
        if [ $num_revision -eq 0 ]; then
            wish_msg "COMPILATION FINISHED" "green" "`pwd`/$project" "revision: 'ALL revisions'" &
        else
            wish_msg "COMPILATION FINISHED" "green" "`pwd`/$project" "revision: $revision" &
        fi
    else
        echo -en "\007"
    fi
fi

exit 0
