#!/usr/bin/env perl

# Simplification of the Quartus Prime report file
#
# This script simplify Quartus Prime report file to show user assignment pins only or sort pins
# by group: user, power, ground, other

use v5.14;

use File::Basename;
use Term::ANSIColor qw(:constants);

my $script_name = basename($0);

sub help {
    say "Usage:";
    say "  $script_name [quartus_pin_file] [output-report-file]";
    say "                   [-a|--all] [-p|--sort-power]\n";
    say "ARGS:";
    say "   <quartus_pin_file>";
    say "            Quartus pin-file.";
    say "   <output-report-file>";
    say "            Output report file; by default <quartus_pin_file>.log.\n";
    say "OPTIONS:";
    say "    -a|--all";
    say "            Write information about all pins.";
    say "    -p|--sort-power";
    say "            Sort power pins by voltage(will turn on option: -a).";
}

my $input_file;
my $output_file;
my $all_pins = 0;
my $sort_power = 0;

if (@ARGV < 1 or @ARGV > 3) {
    help;
    exit;
} else {
    while (@ARGV) {
        $_ = shift;
        if (/-h|--help/) {
            help;
            exit;
        } elsif (/-|--/) {
            if (/-p?a|-ap?|--all/) {
                $all_pins = 1;
                if (/p/) {
                    $sort_power = 1;
                }
            } elsif (/-p|--sort-power/) {
                $all_pins = 1;
                $sort_power = 1;
            } else {
                say "Warning! Unsupported options: $_!"
            }
        } else {
            if (!$input_file) {
                $input_file = $_;
            } elsif (!$output_file) {
                $output_file = $_;
            }
        }
    }
}

if (!$output_file) {
    $output_file = "$input_file.log";
}

say "Input  file: $input_file";
say "Output file: $output_file";

open(my $fh_in,  "<", $input_file) or die BOLD RED,  "ERROR! Can't open input file: $!",  RESET "\n";
open(my $fh_out, ">", $output_file) or die BOLD RED, "ERROR! Can't open output file: $!", RESET "\n";

my $pin_list = 0;
my @power;
my ($gnd, $other, $nc) = ("", "", "", "");
while (<$fh_in>) {
    chomp;
    if (/^Pin Name\/Usage/) {
        $pin_list = 1;
    }
    if ($pin_list == 1) {
        # Quartus Prime pin-file fields:
        #   <Pin Name/Usage : Location : Dir. : I/O Standard : Voltage : I/O Bank : User Assignment>
        my @rpt = split(/:/);
        my ($dir, $user_assignment) = ($rpt[2], $rpt[6]);
        $dir =~ s/^\s(.*?)\s*$/$1/;             # trim whitespace from both sides
        $user_assignment =~ s/^\s(.*?)\s*$/$1/; # trim whitespace from both sides
        if ($user_assignment eq "Y" || $dir =~ "input|output") {
            say $fh_out $_;
        } elsif ($all_pins) {
            if (
                /power/) {
                push(@power, "$_\n");
            } elsif (/gnd/) {
                $gnd .= "$_\n";
            } elsif (/NC|RESERVED_/) {
                $nc .= "$_\n";
            } else {
                if (!/^Pin Name\/Usage|---/) { # part of header
                    $other .= "$_\n";
                }
            }
        }
    }
}

if (!$pin_list) {
    local $Term::ANSIColor::AUTORESET = 1;
    say BOLD RED "ERROR! Can't find Quartus pin-file data!";
}

if ($sort_power) {
    @power = reverse sort {(split(/:/, $b))[4] cmp (split(/:/, $a))[4] ||
                               (split(/:/, $b))[1] cmp (split(/:/, $a))[1]
                           } @power;
}

say $fh_out "";
say $fh_out @power;
say $fh_out "$gnd";
say $fh_out "$other";
say $fh_out "$nc";

close($fh_in);
close($fh_out);
